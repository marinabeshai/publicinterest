import datetime as dt
from numpy import e
import yfinance as yf

# 

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# https://stackoverflow.com/questions/2272149/round-to-5-or-other-number-in-python
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def myround(x, base=5):
    return base * round(x/base)
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_ohlc_average(row):
    open = float(row['Open'])
    high = float(row['High'])
    low = float(row['Low'])
    close = float(row['Close'])

    return (open + high + low + close)/4
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_shares_scale(average, amount):
    l = amount.split('-')
    nl = []

    for a in l:
        a = a.strip()
        a = a[1:].replace(",", "")

        num_shares = float(a)/average
        nl.append(myround(num_shares))

    return nl
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_price(ticker, date, amount):
    if not isvalid(ticker): 
        return None 
   
    formatted_date = format_transaction_date_df(date)

    start_date, end_date = format_transaction_date_search(date)

    try: 
        # Get the data
        df = yf.download(ticker, start_date, end_date)
        
        if df.empty:
            return None 
                
        for index, row in df.iterrows():
            index = str(index).split(" ")[0]

            if index == formatted_date:
                break

        ohlc_average = get_ohlc_average(row)
        return get_shares_scale(ohlc_average, amount)

    except IndexError:
        print(ticker)
        print("hi")
        print("================================================================")
        exit(1) 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# format_transaction_date_df('01/07/2011') --> '2011-01-07'
# format_transaction_date_df('1/7/2011') --> '2011-01-07'
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def format_transaction_date_df(s):
    return dt.datetime.strptime(s, "%m/%d/%Y").strftime("%Y-%m-%d")
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# format_transaction_date_search('01/07/2011') -->  '07-01-2011', '17-01-2011'
# format_transaction_date_search('1/7/2011') --> '07-01-2011', '17-01-2011'
# Formatted required by mini_yahoo_finance. We extend the time frame by 10 days because there seems to be a bug of mini_yahoo_finance not accurately capturing dates and times.  ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def format_transaction_date_search(s):
    start_date = dt.datetime.strptime(s, "%m/%d/%Y")
    end_date = start_date + dt.timedelta(days=2)
    return start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_year(s):
    return s[6:]
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
