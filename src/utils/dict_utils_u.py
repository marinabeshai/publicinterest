import copy

# d_prime = {'ticker' : {'date' : #_of_transactions, ....} , 'ticker2' : .... }
# d = {'ticker' : {'best_date' : #_of_transactions}, .... }
def flatten(d_prime):
    d = {}
    
    for ticker in d_prime:
        curr = 0 
        best = None 
        
        for date in d_prime[ticker]:
            
            if d_prime[ticker][date] > curr:
                curr = d_prime[ticker][date]
                best = date
                
            if best:
                d[ticker] = {best : curr} 
                
    return d 



def commify(d):
    for k,v in d.items():
        d[k] = "{:,}".format(v)
    return d      


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Sam') --> d={'Jack': 1, 'Sam':36}
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Percy') --> d={'Jack': 1, 'Sam':35, 'Percy':1}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary(d, key, addition=1):
    old = d.get(key, 0)
    d.update({key: (old + addition)})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Sam') --> d={'Jack': 1, 'Sam':36}
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Percy') --> d={'Jack': 1, 'Sam':35, 'Percy':1}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def add_key_dictionary(d, key):
    if key in d:
        raise Exception("This isn't possible.")
    d.update({key: 0})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def increment_set_in_dictionary(d, key, inner_key, inner_value):
    
    if key in d:
        if inner_key in d[key]:
            d[key][inner_key].add(inner_value)

        else:
            s = set()
            s.add(inner_value)
            d[key] = {inner_key : s}
    else:
        s = set()
        s.add(inner_value)
        d[key] = {inner_key : s}
 
    return d 

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary_in_dictionary(d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 50, 'Max': 23}}, key:'AMZ', inner_key='Sam') --> d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 51, 'Max': 23}}
# increment_dictionary_in_dictionary(d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 50, 'Max': 23}}, key:'AMZ', inner_key='M') --> d={'APPL': {'Jack': 1}, 'AMZ': {'M': 1, 'Sam': 50, 'Max': 23}}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary_in_dictionary(d, key, inner_key):
    if key in d:
        key_d = d.get(key, 0)

        if key_d == 0:
            raise Exception("This isn't possible.")

        key_d = increment_dictionary(key_d, inner_key)
        d.update({key: key_d})
    else:
        d.update({key: {inner_key: 1}})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def add_sort_key_for_amount(d, normal_header="", normal=False):
    
    if normal: 
        d_copy = {}
        # {'amount' : x} ---> 
        
        # {'$1,001 - $15,000': {'Republican Party (United States)': 3714, .... }
        
        for k, v in d.items():
            d_copy[k] = {normal_header : v}
    
    else:
        d_copy = copy.deepcopy(d)


    for amount in d:
        # move to utils
        if amount == "Unknown":
            d_copy[amount]["sort_key"] = -1
            continue

        if "Over" in amount:
            d_copy[amount]["sort_key"] = int(
                    amount.split("$")[1].replace(",", "")) + 1
            continue

        higher_val = amount.split("$")
        higher_val = higher_val[len(higher_val)-1].replace(",", "")
        
        d_copy[amount]["sort_key"] = int(higher_val)

    return d_copy




# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_sort_key(d):
    return dict(sorted(d.items(), key=lambda item: item[1]["sort_key"]))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_values(d):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def sort_dictionary_by_keys(d):
    return dict(sorted(d.items()))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def reversedict(d):
    return dict(reversed(list(d.items())))
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def sort_dictionary_by_inner_values(d):
    # Sorts by inner value, then inner key. 
    # {'--': {'2017/08/31': 53}, 'ECOM': {'2021/02/10': 8}, 'X': {'2021/05/06': 6}, '
    def keyfunc(tup):
        _, d = tup
        return  list(d.values())[0], list(d.keys())[0]
    
    return dict(sorted(d.items(), key = keyfunc))
