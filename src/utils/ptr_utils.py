# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from utils.constants import DATE_FORMAT, Unknown
from datetime import datetime
import pandas as pd 
from scipy.stats.mstats import gmean
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = isvalid("5") 
# x = True 
# 
# x = isvalid("2021/42/21")  
# x = True 
# 
# x = isvalid("Marina")
# x = True 
# 
# x = isvalid(None)
# x = False 
# 
# x = isvalid("PDF Disclosed Filing")
# x = False
# 
# x = isvalid("Unknown")
# x = False
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def isvalid(s):
    try:
        return not pd.isnull(s) and s != "--" and s != "PDF Disclosed Filing" and s != "Unknown"
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = within_tax_date('2021/01/15')
# x = True
# 
# x = within_tax_date('2021/01/01')
# x = True 
# 
# x = within_tax_date('2021/07/15')
# x = False
# 
# x = within_tax_date('2021/12/15')
# x = False
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def within_tax_date(s):
    try:
        l = ['01/15/', '04/15/', '06/15/', '09/15/']
        given_date = datetime.strptime(s, '%Y/%m/%d').date()

        for quarter in l:
            tax = quarter + str(given_date.year)[2:4]
            check_date = datetime.strptime(tax, '%m/%d/%y').date()
            diff = (check_date - given_date).days
                        
            if diff >= 0 and diff <= 14:
                return True

        return False
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = format_date('09/20/2021')
# x = 2021/09/20# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def format_date(d1):
    try:
        # Corner Cases
        d1 = '2021-08-02' if d1 == '0021-08-02' else d1 
        d1 = '2021-06-09' if d1 == '0009-06-09' else d1
        d1 = '2021-06-22' if d1 == '0021-06-22' else d1
        d1 = '2021-06-22' if d1 == '0201-06-22' else d1
        
        return datetime.strptime(d1, "%Y-%m-%d").strftime(DATE_FORMAT) if "-" in d1 else datetime.strptime(d1, "%m/%d/%Y").strftime(DATE_FORMAT)
            
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def format_type(s):
    try:
        if s == 'sale_full':
            return 'Sale (Full)'

        if s == 'sale_partial':
            return 'Sale (Partial)'
        
        if s == 'purchase' or s == 'exchange':
            return s.capitalize()
        return s 
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = difference_between_dates('09/20/2021', '09/21/2021')
# x = -1 
# 
# x = difference_between_dates('09/21/2021', '09/20/2021')
# x = 1
# 
# x = difference_between_dates('09/21/2021', '09/01/2021')
# x = 20
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def difference_between_dates(d1, d2):
    try:
        d1_obj = datetime.strptime(d1, "%m/%d/%Y")
        d2_obj = datetime.strptime(d2, "%m/%d/%Y")
        return (d1_obj - d2_obj).days
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = average_amount("$1,001 - $15,000")
# x = 3874
# 
# x = average_amount("$50,001 - $100,000")
# x = 70711
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def average_amount(s):
    try:
        if "Over" in s:
            return int(gmean([50000001., 150000000.]))

        l = s.replace("$", "").replace(",", "").split(" ")
        l.pop(1)
        l = [float(x) for x in l]

        return int(gmean(l))
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = get_year('09/30/2021')
# x = 2021
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_year(s):
    try: 
        return s[6:]
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
