# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
from utils.constants import AMOUNT, AMOUNT_CONSISTENCY, DATE_FORMAT, Unknown, MORE_THAN_MILLION, TDATE, DDATE, age_groups
from datetime import datetime, timedelta
import pandas as pd 
from scipy.stats.mstats import gmean
import random 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

def consistency_amount(t):
    amount = t[AMOUNT]
    if amount == '$50,000,000 +':
        amount = '$50,000,000.00'
    if amount == '$1,000,000 +':
        amount = random.choice(MORE_THAN_MILLION)
    if amount in AMOUNT_CONSISTENCY:
        amount = AMOUNT_CONSISTENCY[amount]
        
    return amount 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def is_this_date_after(tdate_sale, tdate_purch):
    return datetime.strptime(tdate_sale, DATE_FORMAT).date() >= datetime.strptime(tdate_purch, DATE_FORMAT).date()
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def which_age_group(age):
    for age_group in age_groups.keys():        
        age_group_local = age_group.split("-")
        if int(age_group_local[0]) <= age and age <= int(age_group_local[1]):
            return age_group 
        
    return None 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def commify_str(s):
    return '{:,}'.format(int(s))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = isvalid("5") 
# x = True 
# 
# x = isvalid("2021/42/21")  
# x = True 
# 
# x = isvalid("Marina")
# x = True 
# 
# x = isvalid(None)
# x = False 
# 
# x = isvalid("PDF Disclosed Filing")
# x = False
# 
# x = isvalid("Unknown")
# x = False
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def isvalid(s):
    try:
        return not pd.isnull(s) and s != "--" and s != "PDF Disclosed Filing" and s != "Unknown"
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = within_tax_date('2021/01/15')
# x = True
# 
# x = within_tax_date('2021/01/01')
# x = True 
# 
# x = within_tax_date('2021/07/15')
# x = False
# 
# x = within_tax_date('2021/12/15')
# x = False
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def within_tax_date(s):
    try:
        l = ['01/15/', '04/15/', '06/15/', '09/15/']
        given_date = datetime.strptime(s, '%Y/%m/%d').date()

        for quarter in l:
            tax = quarter + str(given_date.year)[2:4]
            check_date = datetime.strptime(tax, '%m/%d/%y').date()
            diff = (check_date - given_date).days
                        
            if diff >= 0 and diff <= 14:
                return True

        return False
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def validate_date(official_object, date, ddate=False):
    try: 
        
        y1 = int(get_year(date))
        
        for y2 in official_object.get_years_served():
            if y1 == int(y2):
                return True 
            
        if ddate: 
            date = datetime.strptime(date, DATE_FORMAT) - timedelta(days=45)
            date = format_date(str(date.date()))
            return validate_date(official_object, date, ddate=False)
        
        return False
        
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = format_date('09/20/2021')
# x = 2021/09/20# 
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def format_date(d1):
    try:
        # Corner Cases
        d1 = '2021-08-02' if d1 == '0021-08-02' else d1 
        d1 = '2021-06-09' if d1 == '0009-06-09' else d1
        d1 = '2021-06-22' if d1 == '0021-06-22' else d1
        d1 = '2021-06-22' if d1 == '0201-06-22' else d1
        d1 = '2021-11-18' if d1 == '20221-11-18' else d1
        d1 = '2019-06-19' if d1 == '2012-06-19' else d1 
        
        return datetime.strptime(d1, "%Y-%m-%d").strftime(DATE_FORMAT) if "-" in d1 else datetime.strptime(d1, "%m/%d/%Y").strftime(DATE_FORMAT)
            
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def format_type(s):
    try:
        if s == 'sale_full':
            return 'Sale (Full)'

        if s == 'sale_partial':
            return 'Sale (Partial)'
        
        if s == 'purchase' or s == 'exchange':
            return s.capitalize()
        return s 
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = difference_between_dates('09/20/2021', '09/21/2021')
# x = -1 
# 
# x = difference_between_dates('09/21/2021', '09/20/2021')
# x = 1
# 
# x = difference_between_dates('09/21/2021', '09/01/2021')
# x = 20
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def difference_between_dates(t):
    try:
        transaction_date = t[TDATE]
        disclosure_date = t[DDATE]
        
        ddate = datetime.strptime(disclosure_date, "%Y/%m/%d")
        tdate = datetime.strptime(transaction_date, "%Y/%m/%d")
        return (ddate - tdate).days
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# x = average_amount("$1,001 - $15,000")
# x = 3874
# 
# x = average_amount("$50,001 - $100,000")
# x = 70711
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_gmean(x):
    try:
        if x != 'Unknown':

            if x == '$1,001 -':
                return int(gmean(range(1, 1001)))

            if x == 'Over $50,000,000' or x == '$50,000,000 +':
                return int(gmean(range(50000000, 100000001)))

            elif '+' in x: 
                x = random.choice(MORE_THAN_MILLION)
                return int(get_gmean(x))

            lower_amount = int(x.split("-")[0].replace(",", "").strip()[1 :])
            upper_amount = int(x.split("-")[1].replace(",", "").strip()[1 :])
            return int(gmean(range(lower_amount, upper_amount+1)))

    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_year(s):
    try: 
        return datetime.strptime(s, DATE_FORMAT).year
            
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def make_percent(num, den):
    return "{0:.2f}%".format((num/den)*100) 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
