# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
import copy
from utils.constants import Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def flatten_len(d, inner_set=False):
    for key in d:
        if inner_set:
            d[key] = len(d[key])
            continue 
                
        for inner_d in d[key]:             
            d[key][inner_d] = len(d[key][inner_d])
    
    return d
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
           
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {'Frog A. Cat' : {'2012/01/20' : '3',  '2020/01/12' : '443'} ,  'Sam I. Am' : {'2013/04/12' : '5',  '2001/05/10' : '232'}}
# d = flatten(d)
# d = {'Frog A. Cat': {'2020/01/12': 443}, 'Sam I. Am': {'2001/05/10': 232}}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def flatten_best(d_prime):
    try: 
        d = {}
        
        for key in d_prime:
            curr_best_val = 0 
            best_innerkey = None 
            
            for innerkey in d_prime[key]:
                if int(d_prime[key][innerkey]) > curr_best_val:
                    curr_best_val = int(d_prime[key][innerkey])
                    best_innerkey = innerkey
                    
            if best_innerkey:
                d[key] = {best_innerkey : curr_best_val} 
                    
        return d 
    
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {'Frog A. Cat' : '131414', 'Sam I. Am' : '242', 'Kat Q. Po' : '1'}
# d = commify(d)
# d = {'Frog A. Cat': '131,414', 'Sam I. Am': '242', 'Kat Q. Po': '1'}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def commify(d):
    try:
        for k,v in d.items():
            d[k] = "{:,}".format(int(v))
        return d     
    
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------    # d = {'Frog A. Cat' : '131414', 'Sam I. Am' : '242', 'Kat Q. Po' : '1'}    
# d = increment_dictionary(d, 'Frog A. Cat')    
# d = {'Frog A. Cat': 131415, 'Sam I. Am': '242', 'Kat Q. Po': '1'}
#
# d = {'Frog A. Cat' : '131414', 'Sam I. Am' : '242', 'Kat Q. Po' : '1'}  
# d = increment_dictionary(d, 'Dog Q. Epp')
# d = {'Frog A. Cat': '131414', 'Sam I. Am': '242', 'Kat Q. Po': '1', 'Dog Q. Epp': 1}
#
# d = {'Frog A. Cat' : '131414', 'Sam I. Am' : '242', 'Kat Q. Po' : '1'}
# d = increment_dictionary(d, 'Frog A. Cat', addition=500)
# d =  {'Frog A. Cat': 131914, 'Sam I. Am': '242', 'Kat Q. Po': '1'}
#
# d = {'Frog A. Cat' : '131414', 'Sam I. Am' : '242', 'Kat Q. Po' : '1'}  
# d = increment_dictionary(d, 'Dog Q. Epp', addition=500)
# d = {'Frog A. Cat': '131414', 'Sam I. Am': '242', 'Kat Q. Po': '1', 'Dog Q. Epp': 500}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary(d, key, addition=1, not_math=False):
    try: 
        if not_math:
            d.update({key: addition})

        else:
            old = int(d.get(key, 0))
            d.update({key: (old + addition)})
        return d
    
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
   
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- 
def increment_set_in_dictionary(d, key, value):
    # if set exists
    if key in d:
        d[key].add(value)
    else:
        s = set()
        s.add(value)
        d[key] = s 
    return d 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {'Frog A. Cat' : {'P' : set{'131414'}}, 'Sam I. Am' : {'A' : set{'242'} }, 'Kat Q. Po' : {'W' : set{'1'} }}
# d = increment_set_in_dictionary(d, 'Frog A. Cat', 'P', '131414')
# d = {'Frog A. Cat': {'P': {'131414'}}, 'Sam I. Am': {'A': {'242'}}, 'Kat Q. Po': {'W': {'1'}}}
#
# d = {'Frog A. Cat' : {'P' : {'131414'}}, 'Sam I. Am' : {'A' : {'242'} }, 'Kat Q. Po' : {'W' : {'1'} }}
# d = increment_set_in_dictionary(d, 'Frog A. Cat', 'P', '12')
# d = {'Frog A. Cat': {'P': {'131414', '12'}}, 'Sam I. Am': {'A': {'242'}}, 'Kat Q. Po': {'W': {'1'}}}
#
# d = {'Frog A. Cat' : {'P' : {'131414'}}, 'Sam I. Am' : {'A' : {'242'} }, 'Kat Q. Po' : {'W' : {'1'} }}      
# d = increment_set_in_dictionary(d, 'Frog A. Cat', 'Z', '4242')
# d = {'Frog A. Cat': {'P': {'131414'}, 'Z': {'4242'}}, 'Sam I. Am': {'A': {'242'}}, 'Kat Q. Po': {'W': {'1'}}}
#
# d = {'Frog A. Cat' : {'P' : {'131414'}}, 'Sam I. Am' : {'A' : {'242'} }, 'Kat Q. Po' : {'W' : {'1'} }}
# d = increment_set_in_dictionary(d, 'Brian L. Kaer', 'Z', '4242')
# d = {'Frog A. Cat': {'P': {'131414'}}, 'Sam I. Am': {'A': {'242'}}, 'Kat Q. Po': {'W': {'1'}}, 'Brian L. Kaer': {'Z': {'4242'}}}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def increment_set_in_inner_dictionary(d, key, inner_key, inner_value):
    try: 

        if key in d:
            d = increment_set_in_dictionary(d[key], inner_key, inner_value)
               
        else:
            s = set()
            s.add(inner_value)
            d[key] = {inner_key : s}
    
        return d 

    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {"Jack" : {"Leonard" : 224 , "Aloe" : "33" , "Maynard" : "131"},  "David" : {"Moa" : '232'}}
# d = increment_dictionary_in_dictionary(d, "Jack", "Leonard")
# d = {'Jack': {'Leonard': 225, 'Aloe': '33', 'Maynard': '131'}, 'David': {'Moa': '232'}}
#
# d = {"Jack" : {"Leonard" : 224 , "Aloe" : "33" , "Maynard" : "131"},  "David" : {"Moa" : '232'}}
# d = increment_dictionary_in_dictionary(d, "Jack", "B")
# d = {'Jack': {'Leonard': 224, 'Aloe': '33', 'Maynard': '131', 'B': 1}, 'David': {'Moa': '232'}}
#    
# d = {"Jack" : {"Leonard" : 224 , "Aloe" : "33" , "Maynard" : "131"},  "David" : {"Moa" : '232'}}
# d = increment_dictionary_in_dictionary(d, "Poo", "D")
# d = {'Jack': {'Leonard': 224, 'Aloe': '33', 'Maynard': '131'}, 'David': {'Moa': '232'}, 'Poo': {'D': 1}}    
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary_in_dictionary(d, key, inner_key):
    try: 
        if key in d:
            key_d = d.get(key, 0)

            key_d = increment_dictionary(key_d, inner_key)
            d.update({key: key_d})
        else:
            d.update({key: {inner_key: 1}})
        return d

    except Exception:
        raise Unknown

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = { '$1,001 - $15,000': {'val' : 2424}, '$15,001 - $50,000': {'val' : 3535}}
# d = add_sort_key_for_amount(d, normal=False)
# d = {'$1,001 - $15,000': {'val': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'val': 3535, 'sort_key': 50000}}
#
# d = { '$1,001 - $15,000': {'val' : 2424}, '$15,001 - $50,000': {'val' : 3535}}
# d = add_sort_key_for_amount(d, normal=False)
# d = {'$1,001 - $15,000': {'val': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'val': 3535, 'sort_key': 50000}}
#
# d = { '$1,001 - $15,000': 2424, '$15,001 - $50,000':  3535}
# d = add_sort_key_for_amount(d, normal_header="", normal=True)
# d = {'$1,001 - $15,000': {'': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'': 3535, 'sort_key': 50000}}
#
# d = { '$1,001 - $15,000': 2424, '$15,001 - $50,000':  3535}
# d = add_sort_key_for_amount(d, normal_header="bye", normal=True)
# d = {'$1,001 - $15,000': {'bye': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'bye': 3535, 'sort_key': 50000}}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def add_sort_key_for_amount(d, normal_header="", normal=False):
    if not normal:
        assert normal_header == ""

    try: 
        if normal: 
            d_copy = {}

            for k, v in d.items():
                d_copy[k] = {normal_header : v}
        
        else:
            d_copy = copy.deepcopy(d)


        for amount in d:
            if amount == "Unknown":
                d_copy[amount]["sort_key"] = -1
                continue

            if "Over" in amount:
                d_copy[amount]["sort_key"] = int(
                        amount.split("$")[1].replace(",", "")) + 1
                continue

            higher_val = amount.split("$")
            higher_val = higher_val[len(higher_val)-1].replace(",", "")
            
            d_copy[amount]["sort_key"] = int(higher_val)

        return d_copy

    except Exception:
        raise Unknown

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = { '$15,001 - $50,000': {'val' : 3535}, '$1,001 - $15,000': {'val' : 2424} }
# d = add_sort_key_for_amount(d, normal=False)
# d = sort_dictionary_by_sort_key(d)
# d = {'$1,001 - $15,000': {'val': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'val': 3535, 'sort_key': 50000}}
#
# d = { '$15,001 - $50,000': {'val' : 3535} , '$1,001 - $15,000': {'val' : 2424}}
# d = add_sort_key_for_amount(d, normal=False)
# d = sort_dictionary_by_sort_key(d)
# d = {'$1,001 - $15,000': {'val': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'val': 3535, 'sort_key': 50000}}
#
# d = { '$15,001 - $50,000':  3535, '$1,001 - $15,000': 2424}
# d = add_sort_key_for_amount(d, normal_header="", normal=True)
# d = sort_dictionary_by_sort_key(d)
# d = {'$1,001 - $15,000': {'': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'': 3535, 'sort_key': 50000}}
#
# d = { '$15,001 - $50,000':  3535,  '$1,001 - $15,000': 2424}
# d = add_sort_key_for_amount(d, normal_header="bye", normal=True)
# d = sort_dictionary_by_sort_key(d)
# d = {'$1,001 - $15,000': {'bye': 2424, 'sort_key': 15000}, '$15,001 - $50,000': {'bye': 3535, 'sort_key': 50000}}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_sort_key(d):
    try: 
        return dict(sorted(d.items(), key=lambda item: item[1]["sort_key"]))

    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d =  {'ABC': 31313, 'ZZZ':  0 , 'FRE' : '5'}
# d = sort_dictionary_by_values(d)
# d = {'ABC': 31313, 'FRE': '5', 'ZZZ': 0}
#
# d =  {'ABC': 31313, 'ZZZ':  0 , 'FRE' : '5'}
# d = sort_dictionary_by_values(d, reverse=False)
# d = {'ZZZ': 0, 'FRE': '5', 'ABC': 31313}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_values(d, reverse=True):
    try:  
        return dict(sorted(d.items(), key=lambda item: int(item[1]), reverse=reverse))

    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {'ABC': {'2017/08/31': 53}, 'AAA': {'2021/02/10': 8}, 'ZZZ': {'2021/05/06': 6} }
# d = sort_dictionary_by_keys(d)
# d = {'AAA': {'2021/02/10': 8}, 'ABC': {'2017/08/31': 53}, 'ZZZ': {'2021/05/06': 6}}
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_keys(d):
    try:     
        return dict(sorted(d.items()))

    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# d = {'--': {'2017/08/31': 53}, 'ECOM': {'2021/02/10': 8}, 'X': {'2021/05/06': 6} }
# d = sort_dictionary_by_inner_values(d)
# d = {'X': {'2021/05/06': 6}, 'ECOM': {'2021/02/10': 8}, '--': {'2017/08/31': 53}}
#
# d = {'--': {'2017/08/31': 53}, 'ECOM': {'2021/02/10': 8}, 'X': {'2021/05/06': 6} }
# d = sort_dictionary_by_inner_values(d, reverse=True)
# d = {'--': {'2017/08/31': 53}, 'ECOM': {'2021/02/10': 8}, 'X': {'2021/05/06': 6}}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\
def sort_dictionary_by_inner_values(d, reverse=False):
    try: 

        def keyfunc(tup):
            _, d = tup
            return  list(d.values())[0], list(d.keys())[0]
        
        return dict(sorted(d.items(), key = keyfunc, reverse=reverse))
    
    except Exception:
        raise Unknown
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
