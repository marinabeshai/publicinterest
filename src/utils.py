import os
import pandas as pd
from datetime import date, datetime
import copy


# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
our_path = '../../../curr/'
path_csv = "results/csv"
path_html = "results/html"
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#     # d = '$1,001 - $15,000': {'Republican Party (United States)': 3714, '....'}

def add_sort_key_for_amount(d):
    d_copy = copy.deepcopy(d)
    for amount in d:
        # move to utils
        if amount == "Unknown": 
            d_copy[amount]["sort_key"] = -1 
            continue
        
        if "Over" in amount:
            d_copy[amount]["sort_key"] = int(amount.split("$")[1].replace(",", "")) + 1
            continue
        
       
        higher_val = amount.split("$")
        higher_val = higher_val[len(higher_val)-1].replace(",", "")
        d_copy[amount]["sort_key"] = int(higher_val) 

    return d_copy 
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_data():
    path = '../curr/senate-10182021.csv'
    csvreader = pd.read_csv(path)
    title = csvreader.columns[8]
    rows = csvreader.iterrows()
    return title, rows
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def get_filename(path_csv, filename):
    cwd = os.getcwd()
    make_dir(path_csv)
    return "{path}{slash}{filename}.csv".format(path="{cwd}/{path}".format(cwd=cwd, path=path_csv), slash=('/' if path_csv else None), filename=filename)
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def make_dir(path):
    cwd = os.getcwd()
    try:
        if path:
            dir = "{cwd}/{path}".format(cwd=cwd, path=path)
            os.makedirs(dir)
    except FileExistsError:
        pass
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def isvalid(s):
    return not pd.isnull(s) and s != "--"
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Sam') --> d={'Jack': 1, 'Sam':36}
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Percy') --> d={'Jack': 1, 'Sam':35, 'Percy':1}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary(d, key, addition=1):
    old = d.get(key, 0)
    d.update({key: (old + addition)})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Sam') --> d={'Jack': 1, 'Sam':36}
# increment_dictionary( d={'Jack': 1, 'Sam':35}, key='Percy') --> d={'Jack': 1, 'Sam':35, 'Percy':1}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def add_key_dictionary(d, key):
    if key in d:
        raise Exception("This isn't possible.")
    d.update({key: 0})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# increment_dictionary_in_dictionary(d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 50, 'Max': 23}}, key:'AMZ', inner_key='Sam') --> d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 51, 'Max': 23}}
# increment_dictionary_in_dictionary(d={'APPL': {'Jack': 1}, 'AMZ': {'Sam': 50, 'Max': 23}}, key:'AMZ', inner_key='M') --> d={'APPL': {'Jack': 1}, 'AMZ': {'M': 1, 'Sam': 50, 'Max': 23}}
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def increment_dictionary_in_dictionary(d, key, inner_key):
    if key in d:
        key_d = d.get(key, 0)

        if key_d == 0:
            raise Exception("This isn't possible.")

        key_d = increment_dictionary(key_d, inner_key)
        d.update({key: key_d})
    else:
        d.update({key: {inner_key: 1}})
    return d
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_sort_key(d):
    return dict(sorted(d.items(), key=lambda item: item[1]["sort_key"]))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
def sort_dictionary_by_values(d):
    return dict(sorted(d.items(), key=lambda item: item[1], reverse=True))
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def sort_dictionary_by_keys(d):
    return dict(sorted(d.items()))

# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def within_tax_date(s):
    l = ['01/15/', '04/15/', '06/15/', '09/15/']
    given_date = datetime.strptime(s, '%m/%d/%Y').date()

    for quarter in l:
        tax = quarter + str(given_date.year)[2:]

        check_date = datetime.strptime(tax, '%m/%d/%y').date()

        diff = (check_date - given_date).days
        if diff > 0 and diff <= 14:
            return True

    return False
# --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def reversedict(d):
    return dict(reversed(list(d.items())))

# d1 - s2


def difference_between_dates(d1, d2):
    d1_obj = datetime.strptime(d1, "%m/%d/%Y")
    d2_obj = datetime.strptime(d2, "%m/%d/%Y")
    return (d1_obj - d2_obj).days

    # ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# @TODO
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


def get_year(s):
    return s[6:]
# ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
